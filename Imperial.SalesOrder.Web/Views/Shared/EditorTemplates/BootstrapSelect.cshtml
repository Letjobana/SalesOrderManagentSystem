@using Imperial.SalesOrder.Web.Helpers
@model object
@{
    var htmlAttributes = new RouteValueDictionary();

    htmlAttributes.Add("placeholder", (ViewBag.PlaceHolder != null) ? ViewBag.PlaceHolder : ViewData.ModelMetadata.DisplayName);

    if (ViewBag.ReadOnly != null && ViewBag.ReadOnly == true)
    {
        htmlAttributes.Add("disabled", true);
    }

    if (ViewBag.id != null)
    {
        htmlAttributes.Add("id", ViewBag.id);
    }

    if (ViewBag.Required != null)
    {
        htmlAttributes.Add("required", "required");
    }

    if (ViewBag.onchange != null)
    {
        htmlAttributes.Add("onchange", ViewBag.onchange);
    }

    string optionLabel = string.IsNullOrEmpty(ViewBag.OptionLabel) ? string.Empty : ViewBag.OptionLabel;

    bool hideLabel = (ViewBag.HideLabel != null) ? ViewBag.HideLabel : false;
    string labelClass = (ViewBag.LabelClass != null) ? ViewBag.LabelClass : "col-form-label col-sm-3 offset-xl-1";
    string controlClass = (ViewBag.ControlClass != null) ? ViewBag.ControlClass : "form-select";
    controlClass += Html.ValidationErrorFor(m => m, " is-invalid");

    htmlAttributes.Add("class", (ViewBag.@class != null) ? ViewBag.@class : controlClass);
}

@*Output for control*@
<div class="row mb-2">
    @if (!hideLabel)
    {
        @Html.LabelFor(m => m, new { @class = labelClass })
    }

    <div class="col-sm-9 col-xl-7">



        @if (string.IsNullOrEmpty(optionLabel))
        {
            @Html.DropDownListFor(m => m, (SelectList)ViewData["SelectList"], htmlAttributes)
        }
        else
        {
            @Html.DropDownListFor(m => m, (SelectList)ViewData["SelectList"], optionLabel, htmlAttributes)
        }
    </div>

    <div class="invalid-feedback offset-md-2">
        @Html.ValidationMessageFor(m => m)
    </div>
</div>